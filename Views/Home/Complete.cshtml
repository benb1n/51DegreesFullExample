@model _51DegreesFullExample.Models.ResultsViewModel
@{
    ViewData["Title"] = "Results";
}
<h2>Completed Results</h2>

<noscript>
    <div class="example-alert">
        WARNING: JavaScript is disabled in your browser. This means that the callback discussed
        further down this page will not fire and UACH headers will not be sent.
    </div>
</noscript>

<div id="content">
    <h3>Detection results</h3>
    <p>
        The following values are determined by sever-side device detection
        on the first request:
    </p>
    <table>
        <tr>
            <th>Key</th>
            <th>Value</th>
        </tr>
        <tr class="lightyellow"><td><b>Hardware Vendor:</b></td><td> @Model.HardwareVendor</td></tr>
        <tr class="lightyellow"><td><b>Hardware Name:</b></td><td> @Model.HardwareName</td></tr>
        <tr class="lightyellow"><td><b>Device Type:</b></td><td> @Model.DeviceType</td></tr>
        <tr class="lightyellow"><td><b>Platform Vendor:</b></td><td> @Model.PlatformVendor</td></tr>
        <tr class="lightyellow"><td><b>Platform Name:</b></td><td> @Model.PlatformName</td></tr>
        <tr class="lightyellow"><td><b>Platform Version:</b></td><td> @Model.PlatformVersion</td></tr>
        <tr class="lightyellow"><td><b>Browser Vendor:</b></td><td> @Model.BrowserVendor</td></tr>
        <tr class="lightyellow"><td><b>Browser Name:</b></td><td> @Model.BrowserName</td></tr>
        <tr class="lightyellow"><td><b>Browser Version:</b></td><td> @Model.BrowserVersion</td></tr>
        <tr class="lightyellow"><td><b>Screen width (pixels):</b></td><td> @Model.ScreenWidth</td></tr>
        <tr class="lightyellow"><td><b>Screen height (pixels):</b></td><td> @Model.ScreenHeight</td></tr>
        <tr class="lightyellow"><td><b>Device Id:</b></td><td> @Model.DeviceId</td></tr>
    </table>
    <br />

    <div id="evidence">
        <h3>Evidence used</h3>
        <p class="smaller">Evidence was <span class="lightgreen">used</span> / <span class="lightyellow">present</span> for detection</p>
        <table>
            <tr>
                 <th>Key</th>
                <th>Value</th>
            </tr>
            @foreach (var entry in Model.Evidence)
            {
                <tr class="@(entry.Used ? "lightgreen" : "lightyellow")">
                    <td><b>@(entry.Key)</b></td>
                    <td>@(entry.Value)</td>
                </tr>
            }
        </table>
    </div>
    <br />

    <div id="response-headers">
        <h3>Response headers</h3>
        <table>
            <tr>
                <th>Key</th>
                <th>Value</th>
            </tr>
            @foreach (var entry in Model.ResponseHeaders)
            {
                <tr class="lightyellow">
                    <td><b>@(entry.Key)</b></td>
                    <td>@(entry.Value)</td>
                </tr>
            }
        </table>
    </div>
    @if (Model.ResponseHeaders.ContainsKey("Accept-CH") == false)
    {
        <div class="example-alert">
            WARNING: There is no Accept-CH header in the response. This may indicate that your
            browser does not support User-Agent Client Hints. This is not necessarily a problem,
            but if you are wanting to try out detection using User-Agent Client Hints, then make
            sure that your browser
            <a href="https://developer.mozilla.org/en-US/docs/Web/API/User-Agent_Client_Hints_API#browser_compatibility">supports them</a>.
        </div>
    }
    <br />

    <h3>Client-side Evidence and Apple Models</h3>
    @if (Model.Engine.DataSourceTier == "Lite")
    {
        <div class="example-alert">
            WARNING: You are using the free 'Lite' data file. This does not include the client-side
            evidence capabilities of the paid-for data file, so you will not see any additional
            data below. Find out about the Enterprise data file on our
            <a href="https://51degrees.com/pricing">pricing page</a>.
        </div>
    }
</div>

@* This View Component is embedded within the FiftyOne.Pipeline.Web package.
    it adds a JavaScript include for 51Degrees.core.js.
    The FiftyOne degrees middleware will intercept the request for this file and serve dynamically
    generated JavaScript, which includes a JSON representation of the contents of flow data.
    i.e. The results from device detection.

    In addition, this JavaScript will look for properties that have a flag set indicating that
    they contain executable script snippets.
    These snippets will be executed and the values they obtain will be sent back to the server
    in order for it to perform the detection process again with the new information.
    This callback will also include any User-Agent Client Hints headers that have been requested
    with the 'Accept-CH' header. (assuming the browser is willing to send them)

    When the server responds, the JSON representation of the results will be updated with the
    new values and the 'complete' event will fire.
    Below, we subscribe to this complete event and display the values from the updated JSON.
*@
@await Component.InvokeAsync("FiftyOneJS")

<script>
    window.onload = function () {
        // Subscribe to the 'complete' event.
        fod.complete(function (data) {
            // When the event fires, use the supplied data to populate a new table.
            let fieldValues = [];

            var hardwareName = typeof data.device.hardwarename == "undefined" ?
                "Unknown" : data.device.hardwarename.join(", ")
            fieldValues.push(["Hardware Name: ", hardwareName]);
            fieldValues.push(["Platform: ",
                data.device.platformname + " " + data.device.platformversion]);
            fieldValues.push(["Browser: ",
                data.device.browsername + " " + data.device.browserversion]);
            fieldValues.push(["Screen width (pixels): ", data.device.screenpixelswidth]);
            fieldValues.push(["Screen height (pixels): ", data.device.screenpixelsheight]);
            displayValues(fieldValues);
        });
    }

    // Helper function to add a table that displays the supplied values.
    function displayValues(fieldValues) {
        var table = document.createElement("table");
        var tr = document.createElement("tr");
        addToRow(tr, "th", "Key", false);
        addToRow(tr, "th", "Value", false);
        table.appendChild(tr);

        fieldValues.forEach(function (entry) {
            var tr = document.createElement("tr");
            tr.classList.add("lightyellow");
            addToRow(tr, "td", entry[0], true);
            addToRow(tr, "td", entry[1], false);
            table.appendChild(tr);
        });

        var element = document.getElementById("content");
        element.appendChild(table);
    }

    // Helper function to add an entry to a table row.
    function addToRow(row, elementName, text, strong) {
        var entry = document.createElement(elementName);
        var textNode = document.createTextNode(text);
        if (strong === true) {
            var strongNode = document.createElement("strong");
            strongNode.appendChild(textNode);
            textNode = strongNode;
        }
        entry.appendChild(textNode);
        row.appendChild(entry);
    }
</script>